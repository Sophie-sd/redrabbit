"""
–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞ –ø–∞–Ω–µ–ª—å —Ç–æ–≤–∞—Ä—ñ–≤
"""
from django.contrib import admin
from django.utils.html import format_html
from django.contrib import messages

from .models import Category, Product, ProductImage, ProductAttribute, ProductTag, ProductReview, Brand


class ProductImageInline(admin.TabularInline):
    model = ProductImage
    extra = 1
    fields = ['get_image_preview', 'image', 'alt_text', 'is_main', 'sort_order']
    readonly_fields = ['get_image_preview']
    classes = ['collapse']
    verbose_name = '–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É'
    verbose_name_plural = '–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É'
    
    def get_image_preview(self, obj):
        if obj.image:
            return format_html('<img src="{}" class="admin-thumbnail" />', obj.image.url)
        return "–ù–µ–º–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"
    get_image_preview.short_description = '–ü—Ä–µ–≤—å—é'


class ProductAttributeInline(admin.TabularInline):
    model = ProductAttribute
    extra = 1
    fields = ['name', 'value', 'sort_order']
    classes = ['collapse']
    verbose_name = '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞'
    verbose_name_plural = '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä—É'


@admin.register(Category)
class CategoryAdmin(admin.ModelAdmin):
    list_display = ['get_category_image', 'name', 'parent', 'get_products_count', 'is_active', 'sort_order']
    list_display_links = ['get_category_image', 'name']
    list_filter = ['is_active', 'parent']
    search_fields = ['name', 'description', 'external_id']
    prepopulated_fields = {'slug': ('name',)}
    list_editable = ['is_active', 'sort_order']
    ordering = ['sort_order', 'name']
    save_on_top = True
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('name', 'slug', 'parent', 'image', 'description')
        }),
        ('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', {
            'fields': (('is_active', 'sort_order'),)
        }),
        ('–Ü–º–ø–æ—Ä—Ç', {
            'fields': ('external_id',),
            'classes': ('collapse',),
            'description': 'ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤ —Å–∏—Å—Ç–µ–º—ñ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)'
        }),
        ('SEO', {
            'fields': ('meta_title', 'meta_description'),
            'classes': ('collapse',)
        }),
    )
    
    def get_category_image(self, obj):
        if obj.image:
            return format_html('<img src="{}" class="admin-thumbnail-small" />', obj.image.url)
        return format_html('<div class="admin-icon-placeholder">üìÇ</div>')
    get_category_image.short_description = '–§–æ—Ç–æ'
    
    def get_products_count(self, obj):
        count = obj.product_set.filter(is_active=True).count()
        return format_html('<span class="badge badge-info">{}</span>', count)
    get_products_count.short_description = '–¢–æ–≤–∞—Ä—ñ–≤'
    
    def get_queryset(self, request):
        return super().get_queryset(request).select_related('parent')


@admin.register(Product)
class ProductAdmin(admin.ModelAdmin):
    list_display = [
        'get_product_image', 'name', 'category', 'sku', 
        'get_price_display', 'stock', 'get_status_display', 'get_badges', 'updated_at'
    ]
    list_display_links = ['get_product_image', 'name']
    list_filter = [
        'is_active', 'category', 'is_sale', 'is_top', 'is_new', 'is_featured',
        'created_at', 'updated_at'
    ]
    search_fields = ['name', 'sku', 'description', 'external_id', 'vendor_name']
    prepopulated_fields = {'slug': ('name',)}
    list_editable = ['stock']
    ordering = ['sort_order', '-created_at']
    date_hierarchy = 'created_at'
    list_per_page = 50
    save_on_top = True
    
    inlines = [ProductImageInline, ProductAttributeInline]
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('name', 'slug', 'category', 'sku', 'description')
        }),
        ('–¶—ñ–Ω–∞', {
            'fields': ('retail_price', ('is_sale', 'sale_price')),
            'description': '–ê–∫—Ü—ñ–π–Ω–∞ —Ü—ñ–Ω–∞ –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑ —Ñ–∞–π–ª—ñ–≤ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞'
        }),
        ('–°–∫–ª–∞–¥ —Ç–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å', {
            'fields': (('stock', 'is_active'), 'is_featured')
        }),
        ('–ë–µ–π–¥–∂—ñ (–≤—Å—Ç–∞–Ω–æ–≤–ª—é—é—Ç—å—Å—è –≤—Ä—É—á–Ω—É)', {
            'fields': (('is_top', 'is_new'), 'sort_order'),
            'description': '–•–Ü–¢ —Ç–∞ –ù–û–í–ò–ù–ö–ê –≤—Å—Ç–∞–Ω–æ–≤–ª—é—é—Ç—å—Å—è –≤—Ä—É—á–Ω—É. –ë–µ–π–¥–∂ –ê–ö–¶–Ü–Ø –∑\'—è–≤–ª—è—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∞–∫—Ü—ñ–π–Ω–æ—ó —Ü—ñ–Ω–∏'
        }),
        ('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑ —ñ–º–ø–æ—Ä—Ç—É', {
            'fields': ('external_id', 'vendor_name'),
            'classes': ('collapse',),
            'description': '–î–∞–Ω—ñ –∑ —Ñ–∞–π–ª—ñ–≤ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)'
        }),
        ('SEO', {
            'fields': ('meta_title', 'meta_description'),
            'classes': ('collapse',)
        }),
        ('–°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    
    readonly_fields = ['created_at', 'updated_at']
    
    actions = [
        'activate_products', 
        'deactivate_products',
        'mark_as_top',
        'unmark_as_top',
        'mark_as_new',
        'unmark_as_new',
        'export_to_csv',
    ]
    
    def get_product_image(self, obj):
        main_image = obj.images.filter(is_main=True).first() or obj.images.first()
        if main_image:
            return format_html('<img src="{}" class="admin-thumbnail-small" />', main_image.image.url)
        return format_html('<div class="admin-icon-placeholder">üì¶</div>')
    get_product_image.short_description = '–§–æ—Ç–æ'
    
    def get_price_display(self, obj):
        if obj.is_sale and obj.sale_price:
            discount = obj.get_discount_percentage()
            return format_html(
                '<div><strong>{} ‚Ç¥</strong><br><span class="badge badge-sale">{} ‚Ç¥ (-{}%)</span></div>',
                obj.retail_price, obj.sale_price, discount
            )
        return format_html('<strong>{} ‚Ç¥</strong>', obj.retail_price)
    get_price_display.short_description = '–¶—ñ–Ω–∞'
    
    def get_status_display(self, obj):
        if obj.is_active:
            if obj.stock > 0:
                return format_html('<span class="status-active">‚óè –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ</span>')
            else:
                return format_html('<span class="status-warning">‚ö† –ù–µ–º–∞—î –Ω–∞ —Å–∫–ª–∞–¥—ñ</span>')
        return format_html('<span class="status-inactive">‚úï –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π</span>')
    get_status_display.short_description = '–°—Ç–∞—Ç—É—Å'
    
    def get_badges(self, obj):
        stickers = obj.get_stickers()
        if not stickers:
            return '‚Äî'
        
        badges_html = []
        for sticker in stickers:
            badges_html.append(f'<span class="badge {sticker["class"]}">{sticker["text"]}</span>')
        
        return format_html(' '.join(badges_html))
    get_badges.short_description = '–ë–µ–π–¥–∂—ñ'
    
    def activate_products(self, request, queryset):
        updated = queryset.update(is_active=True)
        self.message_user(request, f"–ê–∫—Ç–∏–≤–æ–≤–∞–Ω–æ {updated} —Ç–æ–≤–∞—Ä—ñ–≤", messages.SUCCESS)
    activate_products.short_description = "‚úì –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –æ–±—Ä–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏"
    
    def deactivate_products(self, request, queryset):
        updated = queryset.update(is_active=False)
        self.message_user(request, f"–î–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ {updated} —Ç–æ–≤–∞—Ä—ñ–≤", messages.SUCCESS)
    deactivate_products.short_description = "‚úï –î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –æ–±—Ä–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏"
    
    def mark_as_top(self, request, queryset):
        updated = queryset.update(is_top=True)
        self.message_user(request, f"–ü–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –•–Ü–¢: {updated} —Ç–æ–≤–∞—Ä—ñ–≤", messages.SUCCESS)
    mark_as_top.short_description = "‚≠ê –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –•–Ü–¢"
    
    def unmark_as_top(self, request, queryset):
        updated = queryset.update(is_top=False)
        self.message_user(request, f"–ó–Ω—è—Ç–æ –ø–æ–∑–Ω–∞—á–∫—É –•–Ü–¢: {updated} —Ç–æ–≤–∞—Ä—ñ–≤", messages.SUCCESS)
    unmark_as_top.short_description = "–ó–Ω—è—Ç–∏ –ø–æ–∑–Ω–∞—á–∫—É –•–Ü–¢"
    
    def mark_as_new(self, request, queryset):
        updated = queryset.update(is_new=True)
        self.message_user(request, f"–ü–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –ù–û–í–ò–ù–ö–ò: {updated} —Ç–æ–≤–∞—Ä—ñ–≤", messages.SUCCESS)
    mark_as_new.short_description = "‚ú® –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –ù–û–í–ò–ù–ö–ò"
    
    def unmark_as_new(self, request, queryset):
        updated = queryset.update(is_new=False)
        self.message_user(request, f"–ó–Ω—è—Ç–æ –ø–æ–∑–Ω–∞—á–∫—É –ù–û–í–ò–ù–ö–ê: {updated} —Ç–æ–≤–∞—Ä—ñ–≤", messages.SUCCESS)
    unmark_as_new.short_description = "–ó–Ω—è—Ç–∏ –ø–æ–∑–Ω–∞—á–∫—É –ù–û–í–ò–ù–ö–ê"
    
    def export_to_csv(self, request, queryset):
        import csv
        from django.http import HttpResponse
        
        response = HttpResponse(content_type='text/csv; charset=utf-8')
        response['Content-Disposition'] = 'attachment; filename="products_export.csv"'
        response.write('\ufeff')
        
        writer = csv.writer(response)
        writer.writerow(['SKU', '–ù–∞–∑–≤–∞', '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', '–¶—ñ–Ω–∞', '–ê–∫—Ü—ñ–π–Ω–∞ —Ü—ñ–Ω–∞', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å', '–°—Ç–∞—Ç—É—Å'])
        
        for product in queryset:
            writer.writerow([
                product.sku,
                product.name,
                product.category.name,
                product.retail_price,
                product.sale_price or '',
                product.stock,
                '–ê–∫—Ç–∏–≤–Ω–∏–π' if product.is_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π'
            ])
        
        self.message_user(request, f"–ï–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {queryset.count()} —Ç–æ–≤–∞—Ä—ñ–≤", messages.SUCCESS)
        return response
    export_to_csv.short_description = "üìä –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –≤ CSV"
    
    def get_queryset(self, request):
        return super().get_queryset(request).select_related('category').prefetch_related('images')
    
    def formfield_for_foreignkey(self, db_field, request, **kwargs):
        if db_field.name == "category":
            kwargs["queryset"] = Category.objects.filter(is_active=True).order_by('sort_order', 'name')
        return super().formfield_for_foreignkey(db_field, request, **kwargs)


@admin.register(ProductTag)
class ProductTagAdmin(admin.ModelAdmin):
    list_display = ['name', 'slug', 'is_active']
    list_editable = ['is_active']
    search_fields = ['name']
    prepopulated_fields = {'slug': ('name',)}
    ordering = ['name']


@admin.register(ProductReview)
class ProductReviewAdmin(admin.ModelAdmin):
    list_display = ['product', 'author_name', 'rating', 'is_approved', 'created_at']
    list_display_links = ['product', 'author_name']
    list_filter = ['is_approved', 'rating', 'created_at']
    list_editable = ['is_approved']
    search_fields = ['product__name', 'author_name', 'text']
    date_hierarchy = 'created_at'
    list_per_page = 50
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('product', 'author_name', 'rating', 'text')
        }),
        ('–î–æ–¥–∞—Ç–∫–æ–≤–æ', {
            'fields': ('category_badge', 'is_approved')
        }),
        ('–°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('created_at',),
            'classes': ('collapse',)
        }),
    )
    
    readonly_fields = ['created_at']
    
    actions = ['approve_reviews', 'disapprove_reviews']
    
    def approve_reviews(self, request, queryset):
        updated = queryset.update(is_approved=True)
        self.message_user(request, f'–°—Ö–≤–∞–ª–µ–Ω–æ {updated} –≤—ñ–¥–≥—É–∫—ñ–≤', messages.SUCCESS)
    approve_reviews.short_description = '‚úì –°—Ö–≤–∞–ª–∏—Ç–∏ –≤–∏–±—Ä–∞–Ω—ñ –≤—ñ–¥–≥—É–∫–∏'
    
    def disapprove_reviews(self, request, queryset):
        updated = queryset.update(is_approved=False)
        self.message_user(request, f'–í—ñ–¥—Ö–∏–ª–µ–Ω–æ {updated} –≤—ñ–¥–≥—É–∫—ñ–≤', messages.WARNING)
    disapprove_reviews.short_description = '‚úó –í—ñ–¥—Ö–∏–ª–∏—Ç–∏ –≤–∏–±—Ä–∞–Ω—ñ –≤—ñ–¥–≥—É–∫–∏'
    
    def get_queryset(self, request):
        return super().get_queryset(request).select_related('product')


@admin.register(Brand)
class BrandAdmin(admin.ModelAdmin):
    list_display = ['get_brand_logo', 'name', 'is_active', 'sort_order', 'created_at']
    list_display_links = ['get_brand_logo', 'name']
    list_editable = ['is_active', 'sort_order']
    list_filter = ['is_active', 'created_at']
    search_fields = ['name', 'description']
    prepopulated_fields = {'slug': ('name',)}
    date_hierarchy = 'created_at'
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('name', 'slug', 'logo', 'description')
        }),
        ('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', {
            'fields': ('is_active', 'sort_order')
        }),
    )
    
    def get_brand_logo(self, obj):
        if obj.logo:
            return format_html('<img src="{}" class="admin-thumbnail-small" />', obj.logo.url)
        return format_html('<div class="admin-icon-placeholder">üè∑Ô∏è</div>')
    get_brand_logo.short_description = '–õ–æ–≥–æ'
