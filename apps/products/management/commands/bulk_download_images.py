"""
–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–∞—Å–æ–≤–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ä—Ç–∏–Ω–æ–∫
"""
import xml.etree.ElementTree as ET
import requests
import time
from concurrent.futures import ThreadPoolExecutor, as_completed
from django.core.management.base import BaseCommand
from apps.products.models import Product
from apps.products.utils.image_downloader import download_product_images


class Command(BaseCommand):
    help = '–ú–∞—Å–æ–≤–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ –¥–ª—è —Ç–æ–≤–∞—Ä—ñ–≤ –±–µ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω—å'

    def add_arguments(self, parser):
        parser.add_argument(
            '--url',
            type=str,
            default='https://smtm.com.ua/_prices/import-retail-ua-2.xml',
            help='URL XML —Ñ—ñ–¥—É'
        )
        parser.add_argument(
            '--batch-size',
            type=int,
            default=100,
            help='–†–æ–∑–º—ñ—Ä –ø–∞–∫–µ—Ç—É –¥–ª—è –æ–±—Ä–æ–±–∫–∏ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: 100)'
        )
        parser.add_argument(
            '--delay',
            type=float,
            default=0.1,
            help='–ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: 0.1)'
        )
        parser.add_argument(
            '--max-retries',
            type=int,
            default=3,
            help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö —Å–ø—Ä–æ–±'
        )
        parser.add_argument(
            '--workers',
            type=int,
            default=10,
            help='–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏—Ö –ø–æ—Ç–æ–∫—ñ–≤ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: 10)'
        )

    def handle(self, *args, **options):
        url = options['url']
        batch_size = options['batch_size']
        delay = options['delay']
        max_retries = options['max_retries']
        workers = options['workers']

        self.stdout.write(self.style.SUCCESS('üñºÔ∏è  –ú–ê–°–û–í–ï –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –ö–ê–†–¢–ò–ù–û–ö'))
        self.stdout.write('='*60)

        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–æ–≤–∞—Ä–∏ –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫
        products_without_images = Product.objects.filter(
            images__isnull=True,
            is_active=True,
            external_id__isnull=False
        ).distinct()
        
        total_products = products_without_images.count()
        self.stdout.write(f'–ó–Ω–∞–π–¥–µ–Ω–æ {total_products} —Ç–æ–≤–∞—Ä—ñ–≤ –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫')
        
        if total_products == 0:
            self.stdout.write(self.style.SUCCESS('‚úÖ –í—Å—ñ —Ç–æ–≤–∞—Ä–∏ –≤–∂–µ –º–∞—é—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏'))
            return

        try:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ XML –∑ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
            self.stdout.write(f'\nüì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è XML –∑ {url}...')
            response = requests.get(url, timeout=60)
            response.raise_for_status()
            root = ET.fromstring(response.content)

            # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç–∏–Ω–æ–∫ –ø–æ vendor_code
            offers_elem = root.find('.//offers')
            if not offers_elem:
                self.stdout.write(self.style.ERROR('‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ offers –≤ XML'))
                return

            self.stdout.write('üóÇÔ∏è  –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É –∫–∞—Ä—Ç–∏–Ω–æ–∫...')
            images_index = {}
            
            for offer in offers_elem.findall('offer'):
                vendor_code = self._get_text(offer, 'vendorCode')
                if vendor_code:
                    pictures = offer.findall('picture')
                    if pictures:
                        images_index[vendor_code] = [p.text for p in pictures if p.text]

            self.stdout.write(f'–ó–Ω–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è {len(images_index)} —Ç–æ–≤–∞—Ä—ñ–≤')

            def process_product(product, current_num):
                if not product.external_id:
                    return 'skipped', None
                
                picture_urls = images_index.get(product.external_id, [])
                if not picture_urls:
                    return 'skipped', None
                
                for retry in range(max_retries):
                    try:
                        success_count, error_count = download_product_images(
                            product, 
                            picture_urls, 
                            clear_existing=False
                        )
                        
                        if success_count > 0:
                            return 'success', success_count
                        elif error_count > 0:
                            return 'error', error_count
                    except Exception:
                        if retry < max_retries - 1:
                            time.sleep(delay * (retry + 1))
                
                return 'failed', None

            processed = 0
            downloaded = 0
            skipped = 0
            errors = 0

            for i in range(0, total_products, batch_size):
                batch = list(products_without_images[i:i + batch_size])
                
                self.stdout.write(f'\nüì¶ –ü–∞–∫–µ—Ç {i//batch_size + 1}: —Ç–æ–≤–∞—Ä–∏ {i+1}-{min(i+batch_size, total_products)}')
                
                with ThreadPoolExecutor(max_workers=workers) as executor:
                    futures = {}
                    for idx, product in enumerate(batch):
                        current_num = i + idx + 1
                        future = executor.submit(process_product, product, current_num)
                        futures[future] = (product, current_num)
                    
                    for future in as_completed(futures):
                        product, current_num = futures[future]
                        status, count = future.result()
                        
                        processed += 1
                        
                        if status == 'success':
                            downloaded += 1
                            self.stdout.write(f'  [{current_num}/{total_products}] {product.name[:40]}... {self.style.SUCCESS("‚úÖ")} {count}')
                        elif status == 'skipped':
                            skipped += 1
                        elif status == 'failed':
                            skipped += 1
                        elif status == 'error':
                            errors += count
                        
                        self.stdout.flush()
                
                self.stdout.write(f'  üìä –û–±—Ä–æ–±–ª–µ–Ω–æ: {processed}/{total_products} | –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {downloaded} | –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}')

            # –ü—ñ–¥—Å—É–º–æ–∫
            self.stdout.write('\n' + '='*60)
            self.stdout.write(self.style.SUCCESS('üéâ –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û!'))
            self.stdout.write(f'üìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
            self.stdout.write(f'   ‚Ä¢ –û–±—Ä–æ–±–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤: {processed}')
            self.stdout.write(f'   ‚Ä¢ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫: {downloaded}')
            self.stdout.write(f'   ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}')
            if errors > 0:
                self.stdout.write(self.style.WARNING(f'   ‚Ä¢ –ü–æ–º–∏–ª–æ–∫: {errors}'))
            self.stdout.write('='*60)

        except requests.RequestException as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è XML: {e}'))
        except ET.ParseError as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É XML: {e}'))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}'))
            import traceback
            self.stdout.write(traceback.format_exc())

    def _get_text(self, element, tag):
        """–ë–µ–∑–ø–µ—á–Ω–æ –æ—Ç—Ä–∏–º—É—î —Ç–µ–∫—Å—Ç –∑ XML –µ–ª–µ–º–µ–Ω—Ç–∞"""
        child = element.find(tag)
        if child is not None and child.text:
            return child.text.strip()
        return ''
