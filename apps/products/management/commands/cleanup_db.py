"""
Management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –ë–î –≤—ñ–¥ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –¥–∞–Ω–∏—Ö
"""
from django.core.management.base import BaseCommand
from apps.products.models import Category, Product, ProductImage
from django.db.models import Count


class Command(BaseCommand):
    help = '–û—á–∏—â—É—î –ë–î –≤—ñ–¥ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –¥–∞–Ω–∏—Ö –ø–µ—Ä–µ–¥ —ñ–º–ø–æ—Ä—Ç–æ–º'

    def add_arguments(self, parser):
        parser.add_argument(
            '--full',
            action='store_true',
            help='–ü–æ–≤–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è (–≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏ —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó)'
        )

    def handle(self, *args, **options):
        full_cleanup = options['full']
        
        self.stdout.write('\n' + '='*70)
        self.stdout.write(self.style.SUCCESS('üßπ –û–ß–ò–©–ï–ù–ù–Ø –ë–ê–ó–ò –î–ê–ù–ò–•'))
        self.stdout.write('='*70 + '\n')

        if full_cleanup:
            # –ü–æ–≤–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è
            self.stdout.write('1Ô∏è‚É£  –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤...')
            product_count = Product.objects.count()
            if product_count > 0:
                Product.objects.all().delete()
                self.stdout.write(self.style.SUCCESS(f'   ‚úì –í–∏–¥–∞–ª–µ–Ω–æ {product_count} —Ç–æ–≤–∞—Ä—ñ–≤'))
            else:
                self.stdout.write('   ‚úì –¢–æ–≤–∞—Ä—ñ–≤ –Ω–µ–º–∞—î')

            self.stdout.write('\n2Ô∏è‚É£  –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π...')
            category_count = Category.objects.count()
            if category_count > 0:
                Category.objects.all().delete()
                self.stdout.write(self.style.SUCCESS(f'   ‚úì –í–∏–¥–∞–ª–µ–Ω–æ {category_count} –∫–∞—Ç–µ–≥–æ—Ä—ñ–π'))
            else:
                self.stdout.write('   ‚úì –ö–∞—Ç–µ–≥–æ—Ä—ñ–π –Ω–µ–º–∞—î')
        else:
            # –ß–∞—Å—Ç–∫–æ–≤–µ –æ—á–∏—â–µ–Ω–Ω—è (—Ç—ñ–ª—å–∫–∏ –ø–æ—Ä–æ–∂–Ω—ñ –õ–ò–°–¢–û–í–Ü –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ orphan images)
            self.stdout.write('1Ô∏è‚É£  –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—ñ—Ö –ª–∏—Å—Ç–æ–≤–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π...')
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –±–µ–∑ —Ç–æ–≤–∞—Ä—ñ–≤ —ñ –±–µ–∑ –¥–æ—á—ñ—Ä–Ω—ñ—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
            from django.db.models import Q
            empty_cats = Category.objects.annotate(
                product_count=Count('product'),
                children_count=Count('children')
            ).filter(
                Q(product_count=0) & Q(children_count=0)
            )
            empty_count = empty_cats.count()
            
            if empty_count > 0:
                self.stdout.write(f'   –ó–Ω–∞–π–¥–µ–Ω–æ {empty_count} –ø–æ—Ä–æ–∂–Ω—ñ—Ö –ª–∏—Å—Ç–æ–≤–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π')
                empty_cats.delete()
                self.stdout.write(self.style.SUCCESS(f'   ‚úì –í–∏–¥–∞–ª–µ–Ω–æ {empty_count} –∫–∞—Ç–µ–≥–æ—Ä—ñ–π'))
            else:
                self.stdout.write('   ‚úì –ü–æ—Ä–æ–∂–Ω—ñ—Ö –ª–∏—Å—Ç–æ–≤–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –Ω–µ–º–∞—î')

            self.stdout.write('\n2Ô∏è‚É£  –í–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤...')
            inactive_products = Product.objects.filter(is_active=False, stock=0)
            inactive_count = inactive_products.count()
            
            if inactive_count > 0:
                inactive_products.delete()
                self.stdout.write(self.style.SUCCESS(f'   ‚úì –í–∏–¥–∞–ª–µ–Ω–æ {inactive_count} —Ç–æ–≤–∞—Ä—ñ–≤'))
            else:
                self.stdout.write('   ‚úì –ù–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–µ–º–∞—î')

        # Orphan images
        self.stdout.write('\n3Ô∏è‚É£  –û—á–∏—â–µ–Ω–Ω—è orphan –∑–æ–±—Ä–∞–∂–µ–Ω—å...')
        try:
            orphan_images = ProductImage.objects.filter(product__isnull=True)
            orphan_count = orphan_images.count()
            if orphan_count > 0:
                orphan_images.delete()
                self.stdout.write(self.style.SUCCESS(f'   ‚úì –í–∏–¥–∞–ª–µ–Ω–æ {orphan_count} –∑–æ–±—Ä–∞–∂–µ–Ω—å'))
            else:
                self.stdout.write('   ‚úì Orphan –∑–æ–±—Ä–∞–∂–µ–Ω—å –Ω–µ–º–∞—î')
        except Exception as e:
            self.stdout.write(self.style.WARNING(f'   ‚ö†Ô∏è  {e}'))

        # –ü—ñ–¥—Å—É–º–æ–∫
        self.stdout.write('\n' + '='*70)
        self.stdout.write(self.style.SUCCESS('‚úÖ –û–ß–ò–©–ï–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û!'))
        self.stdout.write('='*70)
        self.stdout.write('\nüìä –°—Ç–∞–Ω –ë–î:')
        self.stdout.write(f'   –ö–∞—Ç–µ–≥–æ—Ä—ñ–π: {Category.objects.count()}')
        self.stdout.write(f'   –¢–æ–≤–∞—Ä—ñ–≤: {Product.objects.count()}')
        self.stdout.write(f'   –ê–∫—Ç–∏–≤–Ω–∏—Ö: {Product.objects.filter(is_active=True).count()}')
        self.stdout.write('')

