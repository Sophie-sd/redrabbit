"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è URL –∑–æ–±—Ä–∞–∂–µ–Ω—å –±–µ–∑ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
"""
import xml.etree.ElementTree as ET
import requests
from django.core.management.base import BaseCommand
from apps.products.models import Product
from apps.products.utils.image_downloader import download_product_images


class Command(BaseCommand):
    help = '–®–≤–∏–¥–∫–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è URL –∑–æ–±—Ä–∞–∂–µ–Ω—å –¥–ª—è —Ç–æ–≤–∞—Ä—ñ–≤'

    def add_arguments(self, parser):
        parser.add_argument(
            '--url',
            type=str,
            default='https://smtm.com.ua/_prices/import-retail-ua-2.xml',
            help='URL XML —Ñ—ñ–¥—É'
        )

    def handle(self, *args, **options):
        url = options['url']

        self.stdout.write(self.style.SUCCESS('üñºÔ∏è  –®–í–ò–î–ö–ï –î–û–î–ê–í–ê–ù–ù–Ø URL –ó–û–ë–†–ê–ñ–ï–ù–¨'))
        self.stdout.write('='*60)

        products_without_images = Product.objects.filter(
            images__isnull=True,
            is_active=True,
            external_id__isnull=False
        ).distinct()
        
        total_products = products_without_images.count()
        self.stdout.write(f'–ó–Ω–∞–π–¥–µ–Ω–æ {total_products} —Ç–æ–≤–∞—Ä—ñ–≤ –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫')
        
        if total_products == 0:
            self.stdout.write(self.style.SUCCESS('‚úÖ –í—Å—ñ —Ç–æ–≤–∞—Ä–∏ –≤–∂–µ –º–∞—é—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏'))
            return

        try:
            self.stdout.write(f'\nüì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è XML –∑ {url}...')
            response = requests.get(url, timeout=60)
            response.raise_for_status()
            root = ET.fromstring(response.content)

            offers_elem = root.find('.//offers')
            if not offers_elem:
                self.stdout.write(self.style.ERROR('‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ offers –≤ XML'))
                return

            self.stdout.write('üóÇÔ∏è  –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É –∫–∞—Ä—Ç–∏–Ω–æ–∫...')
            images_index = {}
            
            for offer in offers_elem.findall('offer'):
                vendor_code = self._get_text(offer, 'vendorCode')
                if vendor_code:
                    pictures = offer.findall('picture')
                    if pictures:
                        images_index[vendor_code] = [p.text for p in pictures if p.text]

            self.stdout.write(f'–ó–Ω–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è {len(images_index)} —Ç–æ–≤–∞—Ä—ñ–≤\n')

            added = 0
            skipped = 0

            for idx, product in enumerate(products_without_images, 1):
                if not product.external_id:
                    skipped += 1
                    continue

                picture_urls = images_index.get(product.external_id, [])
                if not picture_urls:
                    skipped += 1
                    continue

                success_count, error_count = download_product_images(
                    product, 
                    picture_urls, 
                    clear_existing=False,
                    use_urls=True
                )
                
                if success_count > 0:
                    added += 1
                    self.stdout.write(f'  [{idx}/{total_products}] {product.name[:50]}... ‚úÖ {success_count}')
                
                if idx % 100 == 0:
                    self.stdout.write(f'  üìä –û–±—Ä–æ–±–ª–µ–Ω–æ: {idx}/{total_products} | –î–æ–¥–∞–Ω–æ: {added}')

            self.stdout.write('\n' + '='*60)
            self.stdout.write(self.style.SUCCESS('üéâ –ó–ê–í–ï–†–®–ï–ù–û!'))
            self.stdout.write(f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
            self.stdout.write(f'   ‚Ä¢ –î–æ–¥–∞–Ω–æ: {added}')
            self.stdout.write(f'   ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}')
            self.stdout.write('='*60)

        except requests.RequestException as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è XML: {e}'))
        except ET.ParseError as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É XML: {e}'))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}'))

    def _get_text(self, element, tag):
        child = element.find(tag)
        if child is not None and child.text:
            return child.text.strip()
        return ''

