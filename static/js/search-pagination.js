/**
 * –î–∏–Ω–∞–º—ñ—á–Ω–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—è –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø–æ—à—É–∫—É
 * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ç–æ–≤–∞—Ä–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ —Ç–∞ –æ–Ω–æ–≤–ª—é—î –ª—ñ—á–∏–ª—å–Ω–∏–∫
 */

(function() {
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –≥–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
  if (!window.searchQuery || window.initialCount === undefined) {
    console.log('Search pagination: not initialized');
    return;
  }

  const query = window.searchQuery;
  const productsGrid = document.getElementById('searchProductsGrid');
  const resultsCount = document.getElementById('resultsCount');
  const searchLoading = document.getElementById('searchLoading');
  const searchPagination = document.getElementById('searchPagination');
  
  if (!productsGrid || !resultsCount) {
    console.error('Search pagination: required elements not found');
    return;
  }

  // –°—Ç–∞–Ω –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
  let currentPage = 1;
  let totalPages = 1;
  let totalCount = window.initialCount;
  let isLoading = false;
  let allProductsLoaded = false;

  /**
   * –û–Ω–æ–≤–ª—é—î –ª—ñ—á–∏–ª—å–Ω–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
   */
  function updateResultsCount(count) {
    totalCount = count;
    const plural = count % 10 === 1 && count % 100 !== 11 ? '' :
                   (count % 10 >= 2 && count % 10 <= 4 && (count % 100 < 10 || count % 100 >= 20)) ? '–∏' : '—ñ–≤';
    resultsCount.textContent = `–ó–Ω–∞–π–¥–µ–Ω–æ ${count} —Ç–æ–≤–∞—Ä${plural}`;
  }

  /**
   * –°—Ç–≤–æ—Ä—é—î HTML –¥–ª—è –∫–∞—Ä—Ç–∫–∏ —Ç–æ–≤–∞—Ä—É
   */
  function createProductCard(product) {
    const imageHtml = product.image 
      ? `<img src="${product.image}" alt="${product.name}" loading="lazy">`
      : '<div class="product-card__placeholder">üì¶</div>';
    
    // –ë–µ–π–¥–∂—ñ
    let badgesHtml = '';
    if (product.is_sale) {
      badgesHtml += '<span class="badge badge-sale">–ê–ö–¶–Ü–Ø</span>';
    }
    if (product.is_top) {
      badgesHtml += '<span class="badge badge-top">–¢–û–ü</span>';
    }
    if (product.is_new) {
      badgesHtml += '<span class="badge badge-new">–ù–æ–≤–∏–Ω–∫–∞</span>';
    }

    return `
      <article class="product-card" data-product-id="${product.id}">
        <a href="${product.url}" class="product-card__link">
          <div class="product-card__image-wrapper">
            ${imageHtml}
            ${badgesHtml ? `<div class="product-card__badges">${badgesHtml}</div>` : ''}
          </div>
          <div class="product-card__content">
            <h3 class="product-card__name">${product.name}</h3>
            <div class="product-card__price">${product.price} ‚Ç¥</div>
          </div>
        </a>
        <div class="product-card__actions">
          <button class="btn btn-primary btn-block add-to-cart" data-product-id="${product.id}">
            <svg class="btn-icon" viewBox="0 0 24 24" fill="none">
              <path d="M9 2L6 6H3L3 22H21L21 6H18L15 2H9Z" stroke="currentColor" stroke-width="2"/>
            </svg>
            –ö—É–ø–∏—Ç–∏
          </button>
        </div>
      </article>
    `;
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ç–æ–≤–∞—Ä–∏ –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
   */
  async function loadPage(page) {
    if (isLoading || allProductsLoaded) return;
    
    isLoading = true;
    if (searchLoading) searchLoading.style.display = 'block';

    try {
      const response = await fetch(`/api/search/paginated/?q=${encodeURIComponent(query)}&page=${page}&per_page=20`);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      
      // –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫
      updateResultsCount(data.total_count);
      
      // –î–æ–¥–∞—î–º–æ —Ç–æ–≤–∞—Ä–∏ –¥–æ —Å—ñ—Ç–∫–∏
      if (data.products && data.products.length > 0) {
        data.products.forEach(product => {
          const cardHtml = createProductCard(product);
          productsGrid.insertAdjacentHTML('beforeend', cardHtml);
        });
      }
      
      // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
      currentPage = data.current_page;
      totalPages = data.total_pages;
      
      // –Ø–∫—â–æ —Ü–µ –æ—Å—Ç–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞
      if (!data.has_next) {
        allProductsLoaded = true;
      }
      
      // –û–Ω–æ–≤–ª—é—î–º–æ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é
      renderPagination(data);
      
    } catch (error) {
      console.error('Error loading search results:', error);
      resultsCount.textContent = '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤';
    } finally {
      isLoading = false;
      if (searchLoading) searchLoading.style.display = 'none';
    }
  }

  /**
   * –°—Ç–≤–æ—Ä—é—î HTML –¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
   */
  function renderPagination(data) {
    if (!searchPagination) return;
    
    if (data.total_pages <= 1) {
      searchPagination.innerHTML = '';
      return;
    }

    let paginationHtml = '<div class="pagination">';
    
    // –ö–Ω–æ–ø–∫–∞ "–ü–æ–ø–µ—Ä–µ–¥–Ω—è"
    if (data.has_prev) {
      paginationHtml += `<button class="pagination__btn pagination__btn--prev" data-page="${data.current_page - 1}">
        <svg viewBox="0 0 24 24" width="16" height="16">
          <path d="M15 18l-6-6 6-6" stroke="currentColor" stroke-width="2" fill="none"/>
        </svg>
        –ù–∞–∑–∞–¥
      </button>`;
    }
    
    // –ù–æ–º–µ—Ä–∏ —Å—Ç–æ—Ä—ñ–Ω–æ–∫
    paginationHtml += '<div class="pagination__numbers">';
    
    const maxVisible = 7;
    let startPage = Math.max(1, data.current_page - Math.floor(maxVisible / 2));
    let endPage = Math.min(data.total_pages, startPage + maxVisible - 1);
    
    if (endPage - startPage < maxVisible - 1) {
      startPage = Math.max(1, endPage - maxVisible + 1);
    }
    
    // –ü–µ—Ä—à–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
    if (startPage > 1) {
      paginationHtml += `<button class="pagination__number" data-page="1">1</button>`;
      if (startPage > 2) {
        paginationHtml += '<span class="pagination__ellipsis">...</span>';
      }
    }
    
    // –°–µ—Ä–µ–¥–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    for (let i = startPage; i <= endPage; i++) {
      const isActive = i === data.current_page ? 'pagination__number--active' : '';
      paginationHtml += `<button class="pagination__number ${isActive}" data-page="${i}">${i}</button>`;
    }
    
    // –û—Å—Ç–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞
    if (endPage < data.total_pages) {
      if (endPage < data.total_pages - 1) {
        paginationHtml += '<span class="pagination__ellipsis">...</span>';
      }
      paginationHtml += `<button class="pagination__number" data-page="${data.total_pages}">${data.total_pages}</button>`;
    }
    
    paginationHtml += '</div>';
    
    // –ö–Ω–æ–ø–∫–∞ "–ù–∞—Å—Ç—É–ø–Ω–∞"
    if (data.has_next) {
      paginationHtml += `<button class="pagination__btn pagination__btn--next" data-page="${data.current_page + 1}">
        –î–∞–ª—ñ
        <svg viewBox="0 0 24 24" width="16" height="16">
          <path d="M9 18l6-6-6-6" stroke="currentColor" stroke-width="2" fill="none"/>
        </svg>
      </button>`;
    }
    
    paginationHtml += '</div>';
    
    searchPagination.innerHTML = paginationHtml;
    
    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    searchPagination.querySelectorAll('[data-page]').forEach(btn => {
      btn.addEventListener('click', function() {
        const page = parseInt(this.getAttribute('data-page'));
        if (page !== currentPage) {
          // –ü—Ä–æ–∫—Ä—É—á—É—î–º–æ –¥–æ –ø–æ—á–∞—Ç–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
          const searchResults = document.querySelector('.search-results');
          if (searchResults) {
            searchResults.scrollIntoView({ behavior: 'smooth', block: 'start' });
          }
          
          // –û—á–∏—â–∞—î–º–æ —Å—ñ—Ç–∫—É —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–æ–≤—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
          const initialCards = productsGrid.querySelectorAll('.product-card');
          // –ó–∞–ª–∏—à–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 5 –∫–∞—Ä—Ç–æ–∫ (initial load)
          if (page === 1) {
            // –î–ª—è –ø–µ—Ä—à–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑–∞–ª–∏—à–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ 5
            Array.from(initialCards).slice(5).forEach(card => card.remove());
            currentPage = 0;
            allProductsLoaded = false;
          } else {
            // –î–ª—è —ñ–Ω—à–∏—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –æ—á–∏—â–∞—î–º–æ –≤—Å–µ –∫—Ä—ñ–º –ø–µ—Ä—à–∏—Ö 5
            Array.from(initialCards).slice(5).forEach(card => card.remove());
            currentPage = 0;
            allProductsLoaded = false;
            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ—ó
            loadMultiplePages(page);
            return;
          }
          
          loadPage(page);
        }
      });
    });
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∫—ñ–ª—å–∫–∞ —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –ø—ñ–¥—Ä—è–¥
   */
  async function loadMultiplePages(targetPage) {
    for (let page = 2; page <= targetPage; page++) {
      await loadPage(page);
    }
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è - –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ä–µ—à—Ç—É —Ç–æ–≤–∞—Ä—ñ–≤
   */
  function init() {
    // –Ø–∫—â–æ —î –ø–æ—á–∞—Ç–∫–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏, –ø–æ–∫–∞–∑—É—î–º–æ —ó—Ö –∫—ñ–ª—å–∫—ñ—Å—Ç—å
    if (window.initialCount > 0) {
      updateResultsCount(window.initialCount);
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    setTimeout(() => {
      loadPage(2); // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥—Ä—É–≥—É —Å—Ç–æ—Ä—ñ–Ω–∫—É (–ø–µ—Ä—à—ñ 5 –≤–∂–µ —î)
    }, 100);
  }

  // –ó–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
  init();
})();

