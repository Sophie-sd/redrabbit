(function() {
  const searchInput = document.getElementById('searchInput');
  const autocomplete = document.getElementById('searchAutocomplete');
  let debounceTimer;
  let currentRequest = null; // –î–ª—è –≤—ñ–¥–º—ñ–Ω–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤
  let lastQuery = ''; // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Ç
  
  if (!searchInput || !autocomplete) return;
  
  searchInput.addEventListener('input', function() {
    const query = this.value.trim();
    
    clearTimeout(debounceTimer);
    
    // –°–∫–∞—Å–æ–≤—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∑–∞–ø–∏—Ç —è–∫—â–æ –≤—ñ–Ω —â–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è
    if (currentRequest) {
      currentRequest.abort();
      currentRequest = null;
    }
    
    if (query.length < 2) {
      autocomplete.innerHTML = '';
      autocomplete.classList.remove('active');
      lastQuery = '';
      return;
    }
    
    debounceTimer = setTimeout(() => {
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –∑–∞–ø–∏—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—ñ
      const queryToSearch = query;
      lastQuery = queryToSearch;
      
      // –°—Ç–≤–æ—Ä—é—î–º–æ AbortController –¥–ª—è –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
      const controller = new AbortController();
      currentRequest = controller;
      
      fetch(`/api/search/autocomplete/?q=${encodeURIComponent(queryToSearch)}`, {
        signal: controller.signal
      })
        .then(res => {
          if (!res.ok) {
            throw new Error('Network response was not ok');
          }
          return res.json();
        })
        .then(data => {
          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–ø–∏—Ç —â–µ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π
          if (queryToSearch !== lastQuery) {
            console.log('Ignoring outdated response for:', queryToSearch);
            return;
          }
          
          currentRequest = null;
          
          if (data.results && data.results.length > 0) {
            autocomplete.innerHTML = data.results.map(item => {
              const imageHtml = item.image ? `<img src="${item.image}" alt="${item.name}" loading="lazy">` : '<div class="autocomplete-placeholder">üì¶</div>';
              return `
                <a href="${item.url}" class="autocomplete-item" data-product-url="${item.url}">
                  ${imageHtml}
                  <span class="autocomplete-name">${item.name}</span>
                  <span class="autocomplete-price">${item.price} ‚Ç¥</span>
                </a>
              `;
            }).join('');
            autocomplete.classList.add('active');
            
            // –î–æ–¥–∞—î–º–æ event listener –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
            autocomplete.querySelectorAll('.autocomplete-item').forEach(item => {
              item.addEventListener('click', function(e) {
                e.preventDefault();
                const url = this.getAttribute('data-product-url');
                if (url) {
                  window.location.href = url;
                }
              });
            });
          } else {
            autocomplete.innerHTML = '<div class="autocomplete-empty">–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</div>';
            autocomplete.classList.add('active');
          }
        })
        .catch(err => {
          currentRequest = null;
          
          // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –≤—ñ–¥ —Å–∫–∞—Å–æ–≤–∞–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
          if (err.name === 'AbortError') {
            console.log('Search request aborted');
            return;
          }
          
          console.error('Search error:', err);
          
          // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –∑–∞–ø–∏—Ç —â–µ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π
          if (queryToSearch === lastQuery) {
            autocomplete.innerHTML = '<div class="autocomplete-empty">–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É</div>';
            autocomplete.classList.add('active');
          }
        });
    }, 300);
  });
  
  // –ó–∞–∫—Ä–∏—Ç—Ç—è autocomplete –ø—Ä–∏ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –Ω–∏–º
  document.addEventListener('click', function(e) {
    if (!searchInput.contains(e.target) && !autocomplete.contains(e.target)) {
      autocomplete.classList.remove('active');
    }
  });
  
  // –ó–∞–∫—Ä–∏—Ç—Ç—è autocomplete –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ Escape
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
      autocomplete.classList.remove('active');
    }
  });
})();

